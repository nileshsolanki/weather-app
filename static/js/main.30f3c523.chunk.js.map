{"version":3,"sources":["components/Form.jsx","components/Title.jsx","components/Weather.jsx","components/Frame.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","react_default","a","createElement","onSubmit","this","props","getWeather","style","marginTop","left","type","className","name","placeholder","value","Component","Title","position","textAlign","color","Weather","marginLeft","result","country","city","temperature","humidity","description","error","Frame","boxShadow","backgroundColor","height","width","margin","top","background","backgroundSize","components_Title","components_Form","components_Weather","API_KEY","App","state","undefined","_callee","e","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","console","log","concat","fetch","sent","json","_this","setState","sys","main","temp","weather","stop","components_Frame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30f3c523.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Form extends Component {\n\n\trender(){\n\n\t\tvar formStyle = {\n\t\t\tmarginTop: \"100px\", \n\t\t\tleft: \"50%\"\n\t\t}\n\n\t\treturn(\n\t\t\t<form onSubmit={this.props.getWeather} style={formStyle}>\n\t\t\t\t<input type=\"text\" className=\"m-2\" name=\"country\" placeholder=\"Country...\"/>\n\t\t\t\t<input type=\"text\" className=\"m-2\" name=\"city\" placeholder=\"City...\"/>\n\t\t\t\t<input type=\"submit\" className=\"btn btn-primary m-2\" value=\"find weather\"/>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default Form;","import React, { Component } from \"react\";\n\n\nclass Title extends Component {\n\n\t\n\n\trender(){\n\n\t\tvar titleStyle = {\n\t\t\tposition: \"absolute\",\n\t\t\tmarginTop: \"50%\",\n\t\t\ttextAlign: \"center\",\n\t\t\tcolor: \"white\"\n\t\t};\n\n\t\treturn(\n\t\t\t<div style={titleStyle}>\n\t\t\t\t<h1>Weather Finder</h1>\n\t\t\t\t<h4>A change in Weather is Sufficient to reacreate the world and ourselves</h4>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Title;","import React, { Component } from \"react\";\n\nclass Weather extends Component {\n\n\trender(){\n\n\t\tvar resultStyle = {\n\t\t\ttextAlign: \"left\",\n\t\t\tmarginLeft: \"50px\",\n\t\t\tmarginTop: \"10px\"\n\t\t}\n\n\t\treturn(\n\t\t\t<div style={resultStyle}>\n\t\t\t\t{this.props.result.country && this.props.result.city && <h4>Place: <span>{this.props.result.country}, {this.props.result.city}</span></h4>}\n\t\t\t\t{this.props.result.temperature && <h4>Temperature: <span>{this.props.result.temperature}</span></h4>}\n\t\t\t\t{this.props.result.humidity && <h4>Humidity: <span>{this.props.result.humidity}</span></h4>}\n\t\t\t\t{this.props.result.description && <h4>Description: <span>{this.props.result.description}</span></h4>}\n\t\t\t\t{this.props.result.error && <h4>{this.props.result.error}</h4>}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Weather;","import React, { Component } from \"react\";\nimport Title from \"./Title\";\nimport Form from \"./Form\";\nimport Weather from \"./Weather\"\n\n\nclass Frame extends Component {\n\n\trender(){\n\t\tvar style = {\n\t\t\tboxShadow: \"5px 5px 5px #000000\",\n\t\t\tbackgroundColor: \"#eeeeee\",\n\t\t\theight: \"600px\",\n\t\t\twidth: \"1200px\",\n\t\t\tposition: \"absolute\",\n\t\t\tmargin: \"-300px 0 0 -600px\",\n\t\t\tleft: \"52%\",\n\t\t\ttop: \"50%\"\n\t\t};\n\n\n\t\tvar titleStyle = {\n\t\t\theight: \"600px\",\n\t\t\tbackground: \"url('http://inn.spb.ru/images/600/DSC100645253.jpg')\",\n\t\t\tbackgroundSize: \"cover\"\n\t\t}\n\n\t\tvar formStyle = {\n\n\t\t\theight: \"600px\",\n\t\t\tbackgroundColor: \"#bc7b01\",\n\t\t\ttextAlign: \"center\",\n\t\t\tcolor: \"white\"\n\t\t};\n\n\t\treturn(\n\t\t\t<div className=\"container\" style={style}>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-md-6\" style={titleStyle}>\n\t\t\t\t\t\t<Title/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-md-6\" style={formStyle}>\n\t\t\t\t\t\t<Form getWeather={this.props.getWeather}/>\n\t\t\t\t\t\t<Weather result={this.props.result}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Frame;","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Frame from './components/Frame';\n\nconst API_KEY = \"1d6b1e16378c30cd13df4c27552a4ed5\";\n\nclass App extends Component {\n\n\tstate = {\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\thumidity: undefined,\n\t\ttemperature: undefined,\n\t\tdescription: undefined,\n\t\terror: undefined,\n\t}\n\n\tgetWeather = async (e) => {\n\t\te.preventDefault();\n\t\tconst country = e.target.elements.country.value;\n\t\tconst city = e.target.elements.city.value;\n\n\t\tconsole.log(`country is ${country} and city is ${city}`);\n\n\t\tconst data = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n\t\tconst result = await data.json();\n\n\t\tif(city && country){\n\t\t\tthis.setState({\n\t\t\t\tcity: result.name,\n\t\t\t\tcountry: result.sys.country,\n\t\t\t\ttemperature: result.main.temp,\n\t\t\t\thumidity: result.main.humidity,\n\t\t\t\tdescription: result.weather[0].description,\n\t\t\t\terror: undefined\n\t\t\t});\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tcity: undefined,\n\t\t\t\tcountry: undefined,\n\t\t\t\ttemperature: undefined,\n\t\t\t\thumidity: undefined,\n\t\t\t\tdescription: undefined,\n\t\t\t\terror: \"Enter proper location\"\n\t\t\t});\n\t\t}\n\n\t\tconsole.log(result);\n\t}\n\n\n    render() {\n\n\t    return (\n\t      <div>\n\t        <Frame getWeather={this.getWeather} result={this.state}/>\n\t      </div>\n\t    );\n  \t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}