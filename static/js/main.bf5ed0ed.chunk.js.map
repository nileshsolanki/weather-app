{"version":3,"sources":["components/Title.jsx","components/Form.jsx","components/Weather.jsx","components/Frame.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","style","display","verticalAlign","Component","Form","onSubmit","this","props","getWeather","marginTop","textAlign","type","name","className","placeholder","value","Weather","_this$props$result","result","country","city","temperature","humidity","description","error","valueStyle","color","lineStyle","lineHeight","fontWeight","margin","height","Frame","width","position","marginLeft","top","transform","filter","background","backgroundSize","backgroundPosition","fontFamily","components_Title","backgroundColor","components_Form","components_Weather","API_KEY","App","state","undefined","_callee","e","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","console","log","concat","fetch","sent","json","_this","setState","sys","main","temp","weather","stop","components_Frame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf5ed0ed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n\nclass Title extends Component {\n\n\t\n\n\trender(){\n\n\t\tvar titleStyle = {\n\t\t\tdisplay: \"table-cell\",\n\t\t\tverticalAlign: \"middle\"\n\t\t};\n\n\t\treturn(\n\t\t\t<div style={titleStyle}>\n\t\t\t\t<h1><strong>Weather Finder</strong></h1>\n\t\t\t\t<br/>\n\t\t\t\t<h4>A change in Weather is Sufficient to reacreate the world and ourselves</h4>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Title;","import React, { Component } from \"react\";\n\nclass Form extends Component {\n\n\trender(){\n\n\t\tvar formStyle = {\n\t\t\tmarginTop: \"20px\", \n\t\t\ttextAlign: \"center\"\n \t\t}\n\n\t\treturn(\n\t\t\t<form onSubmit={this.props.getWeather} style={formStyle}>\n\t\t\t\t<input type=\"text\" name=\"country\" className=\"form-control\" placeholder=\"Country...\"/>\n\t\t\t\t<input type=\"text\" name=\"city\" className=\"my-2 form-control\" placeholder=\"City...\"/>\n\t\t\t\t<input type=\"submit\" className=\"btn btn-primary\" value=\"find weather\"/>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default Form;","import React, { Component } from \"react\";\n\nclass Weather extends Component {\n\n\trender(){\n\n\t\tconst {country, city, temperature, humidity, description, error} = this.props.result;\n\n\t\tconst resultStyle = {\n\t\t\tmargin: \"40px 10px 0 10px\",\n\t\t\tcolor: \"red\",\n\t\t\theight: \"50%\",\n\t\t}\n\n\t\tconst valueStyle = {\n\t\t\tcolor: \"white\",\n\t\t}\n\n\t\tconst lineStyle = {\n\t\t\tlineHeight: \"225%\",\n\t\t\tfontWeight: \"100\"\n\t\t}\n\n\n\n\n\t\treturn(\n\t\t\n\t\t\t<div style={resultStyle}>\n\t\t\t\t{country && city && <h3 style={lineStyle}>Place: <span style={valueStyle}>{country}, {city}</span></h3>}\n\t\t\t\t{temperature && <h3 style={lineStyle}>Temperature: <span style={valueStyle}>{temperature} &deg;C</span></h3>}\n\t\t\t\t{humidity && <h3 style={lineStyle}>Humidity: <span style={valueStyle}>{humidity}</span></h3>}\n\t\t\t\t{description && <h3 style={lineStyle}>Description: <span style={valueStyle}>{description}</span></h3>}\n\t\t\t\t{error && <h3 style={lineStyle}>{error}</h3>}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Weather;","import React, { Component } from \"react\";\nimport Title from \"./Title\";\nimport Form from \"./Form\";\nimport Weather from \"./Weather\"\n\n\nclass Frame extends Component {\n\n\trender(){\n\t\t\n\t\tconst titleStyle = {\n\t\t\tbackground: \"url('https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=b0b45845f981a3622a38342b2b7ba770&auto=format&fit=crop&w=401&q=80')\",\n\t\t\tdisplay: \"table\",\n\t\t\ttextAlign: \"center\",\n\t\t\theight: \"100%\",\n\t\t\tbackgroundSize: \"cover\",\n\t\t\tcolor: \"white\",\n\t\t\tbackgroundPosition: \"center center\",\n\t\t\tfontFamily: \"'Montserrat', sans-serif\",\n\t\t}\n\n\t\tconst rowStyle = {\n\t\t\theight: \"90%\",\n\t\t\twidth: \"90%\",\n\t\t\tposition: \"absolute\",\n\t\t\tmarginLeft: \"1.5%\",\n\t\t\ttop: \"50%\",\n\t\t\ttransform: \"translateY(-50%)\",\n\t\t\tfilter: \"drop-shadow(0 0 10px #222)\",\n\t\t\t// boxShadow: \"6px 6px 20px #222\"\n\n\n\t\t}\n\n\t\tconst containerStyle = {\n\t\t\theight: \"100%\",\n\t\t\twidth: \"100%\",\n\t\t\tposition: \"relative\"\n\t\t}\n\n\t\tconst formStyle = {\n\t\t\tbackgroundColor: \"#202C39\",\n\t\t\theight: \"100%\"\n\t\t}\n\n\t\treturn(\n\t\t\t<div className=\"container\" style={containerStyle}>\n\t\t\t\t<div className=\"row\" style={rowStyle}>\n\t\t\t\t\t<div className=\"col-md-6\" style={titleStyle}>\n\t\t\t\t\t\t<Title/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-md-6\" style={formStyle}>\n\t\t\t\t\t\t<Form getWeather={this.props.getWeather}/>\n\t\t\t\t\t\t<Weather result={this.props.result}/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Frame;","import React, { Component } from 'react';\nimport Frame from './components/Frame';\n\nconst API_KEY = \"1d6b1e16378c30cd13df4c27552a4ed5\";\n\nclass App extends Component {\n\n\tstate = {\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\thumidity: undefined,\n\t\ttemperature: undefined,\n\t\tdescription: undefined,\n\t\terror: undefined,\n\t}\n\n\tgetWeather = async (e) => {\n\t\te.preventDefault();\n\t\tconst country = e.target.elements.country.value;\n\t\tconst city = e.target.elements.city.value;\n\n\t\tconsole.log(`country is ${country} and city is ${city}`);\n\n\t\tconst data = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n\t\tconst result = await data.json();\n\n\t\tif(city && country){\n\t\t\tthis.setState({\n\t\t\t\tcity: result.name,\n\t\t\t\tcountry: result.sys.country,\n\t\t\t\ttemperature: result.main.temp,\n\t\t\t\thumidity: result.main.humidity,\n\t\t\t\tdescription: result.weather[0].description,\n\t\t\t\terror: undefined\n\t\t\t});\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tcity: undefined,\n\t\t\t\tcountry: undefined,\n\t\t\t\ttemperature: undefined,\n\t\t\t\thumidity: undefined,\n\t\t\t\tdescription: undefined,\n\t\t\t\terror: \"Enter proper location\"\n\t\t\t});\n\t\t}\n\n\t\tconsole.log(result);\n\t}\n\n\t\n\n\n    render() {\n\n    \tconst frameStyle = {\n    \t\theight: \"100%\",\n    \t\twidth: \"100%\",\n    \t}\n\n\t    return (\n\t      <div style={frameStyle}>\n\t        <Frame getWeather={this.getWeather} result={this.state}/>\n\t      </div>\n\t    );\n  \t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}